<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Svg on Sara Soueidan</title>
    <link>https://sarasoueidan.com/tags/svg/</link>
    <description>Recent content in Svg on Sara Soueidan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 27 Jun 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://sarasoueidan.com/tags/svg/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Mimic Relative Positioning Inside an SVG with Nested SVGs</title>
      <link>https://sarasoueidan.com/2016/06/27/mimic-relative-positioning-in-svg/</link>
      <pubDate>Mon, 27 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://sarasoueidan.com/2016/06/27/mimic-relative-positioning-in-svg/</guid>
      <description>Positioning elements inside an SVG image is very similar—if not identical—to positioning elements absolutely in HTML. Every element in SVG is positioned &#34;absolutely&#34; relative to the SVG viewport, and the position inside the viewport is governed by the current coordinate system in use. But this similarity in positioning elements should not conceal the fact that there is a fundamental difference between SVG elements and HTML elements: SVG elements do not have a box model like HTML elements do in CSS.</description>
    </item>
    
    <item>
      <title>Making the Switch Away from Icon Fonts to SVG: Converting Font Icons to SVG</title>
      <link>https://sarasoueidan.com/2016/04/25/icon-fonts-to-svg/</link>
      <pubDate>Mon, 25 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://sarasoueidan.com/2016/04/25/icon-fonts-to-svg/</guid>
      <description>If you’re reading this article, then I can probably assume you’ve already decided to switch from using fonts for icons to an SVG icon system. Or maybe you&#39;re pondering the idea and want to get an overview of how that would be done and whether or not it&#39;s worth it. Either way, this post is here to help you with that. If you&amp;rsquo;re not already convinced as to why SVG is a better icon system, then I highly recommend reading this article—a cagematch-style comparison between icon fonts and inline SVG for icon systems.</description>
    </item>
    
    <item>
      <title>SVG Style Inheritance and the ‘Flash Of Unstyled SVG’</title>
      <link>https://sarasoueidan.com/2016/03/01/svg-style-inheritance-and-FOUSVG/</link>
      <pubDate>Tue, 01 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://sarasoueidan.com/2016/03/01/svg-style-inheritance-and-FOUSVG/</guid>
      <description>There are too few things not to like about SVG, and I don’t mean the things that browsers cause by incomplete or lack of certain features or buggy implementations. Yet you might sometimes get some unpredictable results that might frustrate you when working with SVG, if you don’t know the details of how certain features should behave and what to expect from them, as per the specifications. SVG presentation attributes come with a bit of their own behavior which might sometimes surprise you.</description>
    </item>
    
    <item>
      <title>Animated SVG vs GIF [CAGEMATCH]</title>
      <link>https://sarasoueidan.com/2015/11/24/svg-vs-gif/</link>
      <pubDate>Tue, 24 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://sarasoueidan.com/2015/11/24/svg-vs-gif/</guid>
      <description>SVG can do much more than display static images. Its animation capabilities are one of its most powerful features, giving it a distinctive advantage over all other image formats. They are one of many reasons that make SVG images better than raster images, including GIFs. But this, of course, only applies to images that are good candidates for SVG, such as:
 Logos, non-complex, vector-based illustrations, user interface controls,  infographics, and icons.</description>
    </item>
    
    <item>
      <title>Tips for Creating and Exporting Better SVGs for the Web</title>
      <link>https://sarasoueidan.com/2015/11/16/svg-tips-for-designers/</link>
      <pubDate>Mon, 16 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://sarasoueidan.com/2015/11/16/svg-tips-for-designers/</guid>
      <description>Working with SVG in a RWD workflow usually involves a design phase and a development phase. The design phase is usually handled by designers who may or may not know how to code. And because of the nature of SVG as both an image format and a document format, every step taken in the graphics editor in the process of creating the SVG directly affects the resulting code and hence the work of the developer in charge of embedding, scripting or animating the SVG.</description>
    </item>
    
    <item>
      <title>CSS vs. SVG: The Final Round(up)</title>
      <link>https://sarasoueidan.com/2015/09/16/css-vs-svg-the-final-roundup/</link>
      <pubDate>Wed, 16 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://sarasoueidan.com/2015/09/16/css-vs-svg-the-final-roundup/</guid>
      <description>This is the last article in the series of article comparing common CSS techniques to their SVG counterparts. This article is a roundup of several CSS and SVG solutions, as opposed to being an article comparing one solution that can be achieved using either CSS and SVG. There are already a bunch of excellent articles out there that cover the details for each of these solutions, so we will get an overview of each solution and link to those articles for each section as we go.</description>
    </item>
    
    <item>
      <title>CSS vs. SVG: Shapes and Arbitrarily-Shaped UI Components</title>
      <link>https://sarasoueidan.com/2015/09/01/css-vs-svg-arbitrarily-shaped-ui-components/</link>
      <pubDate>Tue, 01 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://sarasoueidan.com/2015/09/01/css-vs-svg-arbitrarily-shaped-ui-components/</guid>
      <description>This post is the third in the series of posts exploring techniques and examples that can be achieved using both CSS and SVG, and compares them both.In this article, we are going to go over techniques for creating arbitrarily-shaped UI components using CSS properties and SVG’s capabilities, and a mix of both! Specifically, we will be talking about how to create circular menus, as these are the perfect example of usable non-rectangular UI elements.</description>
    </item>
    
    <item>
      <title>CSS vs SVG: Styling Checkboxes and Radio Buttons</title>
      <link>https://sarasoueidan.com/2015/08/26/css-vs-svg-styling-checkboxes-and-radio-buttons/</link>
      <pubDate>Wed, 26 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://sarasoueidan.com/2015/08/26/css-vs-svg-styling-checkboxes-and-radio-buttons/</guid>
      <description>This post is the second in the series of posts exploring techniques and examples that can be achieved using both CSS and SVG, and compares them both. In this article, we’re going to look into ways to style checkboxes and radio buttons using both CSS and SVG. You will learn how you can create animated checkboxes using SVG&#39;s line drawing capabilities. </description>
    </item>
    
    <item>
      <title>CSS vs. SVG: Graphical Text Effects</title>
      <link>https://sarasoueidan.com/2015/07/31/css-vs-svg-graphical-text/</link>
      <pubDate>Fri, 31 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://sarasoueidan.com/2015/07/31/css-vs-svg-graphical-text/</guid>
      <description>This post is the first in a series of posts exploring techniques and examples that can be achieved using both CSS and SVG, and compares them both. Since I am biased to SVG, this series is really intended to prove that SVG — because of its nature as both an image and a document format — is simply better than CSS when it comes to solving certain design problems on the web.</description>
    </item>
    
    <item>
      <title>Chapter 4, Smashing Book 5</title>
      <link>https://sarasoueidan.com/2015/07/21/smashing-book-5/</link>
      <pubDate>Tue, 21 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://sarasoueidan.com/2015/07/21/smashing-book-5/</guid>
      <description>The new Smashing Book is out! It’s packed with a lot of time-saving, practical techniques for crafting fast, maintainable and scalable responsive websites. I wrote a chapter in the book—Chapter 4: Mastering SVG For Responsive Web Design. Here is an overview of what that chapter covers, and why I think you should buy the book. Photo credit: Mattia Compagnucci  I always get questions from my followers about a good place to start learning SVG.</description>
    </item>
    
    <item>
      <title>Styling the Contents of SVG &amp;lt;use&amp;gt; with CSS</title>
      <link>https://sarasoueidan.com/2015/07/16/styling-svg-use-with-css/</link>
      <pubDate>Thu, 16 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://sarasoueidan.com/2015/07/16/styling-svg-use-with-css/</guid>
      <description>An in-depth article on how to style the contents of the SVG &amp;lt;use&amp;gt; element and overcome some challenges it brings. We get into where the contents are cloned (the shadow DOM!), what limitations that brings up and how to work around them by taking advantage of the CSS cascade and using CSS Variables to get full control over the content while providing fallback for non-supporting browsers. </description>
    </item>
    
    <item>
      <title>Art-Directing an SVG Embedded Using &amp;lt;object&amp;gt;</title>
      <link>https://sarasoueidan.com/2015/07/08/art-directing-svg-object/</link>
      <pubDate>Wed, 08 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://sarasoueidan.com/2015/07/08/art-directing-svg-object/</guid>
      <description>I have recently finished a front-end development project for Provata Health — a US-based health and wellness company specializing in health promotion and behavior change science. As part of their marketing website, I worked on an infographic that showcases the three major health results one can achieve by following their health program. The graphic is a perfect candidate for SVG and you’ll see why throughout this article. But even though almost all of the graphics on the site were vector (which made the entire project exciting to me), I want to focus on this particular graphic and how and why I made the development choices I made while embedding it.</description>
    </item>
    
    <item>
      <title>The State of SVG Animation</title>
      <link>https://sarasoueidan.com/2015/06/05/state-of-svg-animation/</link>
      <pubDate>Fri, 05 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://sarasoueidan.com/2015/06/05/state-of-svg-animation/</guid>
      <description>The state of SVG animation is changing. CSS, SMIL and JavaScript can be used to animate SVGs. However, SMIL is soon to be deprecated and was never supported in Internet Explorer. CSS animations on SVG elements don’t have the best browser support (yet), not to mention are quite buggy in some browsers. JavaScript is currently the best SVG animation tool. In this article, we&#39;ll go over the current and future state of SVG animation, giving you an overview of what you can and can&#39;t do, and some advice on what to choose for your specific animation needs.</description>
    </item>
    
    <item>
      <title>Art-Directing SVG Images With The viewBox Attribute: How-To, Notes, Tips and Why We Need A viewBox Property in CSS</title>
      <link>https://sarasoueidan.com/2015/05/21/svg-art-direction-using-viewbox/</link>
      <pubDate>Thu, 21 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://sarasoueidan.com/2015/05/21/svg-art-direction-using-viewbox/</guid>
      <description>The SVG viewBox attribute is easily one of SVG&#39;s most powerful features. Mastering this attribute can take your SVG skills to the next level, especially considering that a couple of the main SVG spriting techniques rely on this attribute to work. Because the viewBox attribute can be used to crop and extend the SVG canvas, it can be used for art-directing SVGs—by using it to crop the SVG to the area that you want to display at a time.</description>
    </item>
    
    <item>
      <title>Building a Circular Navigation with SVG</title>
      <link>https://sarasoueidan.com/2015/03/09/building-a-circular-navigation-with-svg/</link>
      <pubDate>Mon, 09 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://sarasoueidan.com/2015/03/09/building-a-circular-navigation-with-svg/</guid>
      <description>Last week, I released CIRCULUS.SVG—the SVG circular menu generator. In this article I want to go over why SVG is better suited for creating this kind of UI element, and give you and overview of the SVG code for creating the menu items using SVG elements and transformations. Note that, unlike my usual tutorials, we will not be going over a detailed how-to, but only an overview of the concepts behind this.</description>
    </item>
    
    <item>
      <title>Better SVG Fallback and Art Direction With The &amp;lt;picture&amp;gt; Element</title>
      <link>https://sarasoueidan.com/2015/02/15/svg-picture/</link>
      <pubDate>Sun, 15 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://sarasoueidan.com/2015/02/15/svg-picture/</guid>
      <description>Besides using an SVG as a background image in CSS, you can serve SVG foreground images in HTML using one of several embedding techniques, each of which has its advantages and use cases. Unless you’re in need of interactivity or external styling, &amp;lt;img&amp;gt; is the standard way for loading an SVG image, but it has one disadvantage: you currently need JavaScript to provide fallback and/or change the image source for art direction.</description>
    </item>
    
    <item>
      <title>Useful SVGO[ptimization] Tools</title>
      <link>https://sarasoueidan.com/2015/01/26/svgo-tools/</link>
      <pubDate>Mon, 26 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://sarasoueidan.com/2015/01/26/svgo-tools/</guid>
      <description>One of the steps you need to do when working with SVG is optimizing the SVG code after exporting it from the editor and before embedding in on your web page. For that, several standalone optimization tools exits. The two tools I usually mention in my articles and talks are Peter Collingridge&#39;s online editor, and SVGO. In this article, I&#39;m going to introduce you to a new SVGO Tool that provides us with everything Peter&#39;s tool does, and a bit more.</description>
    </item>
    
    <item>
      <title>Tips For Optimizing SVG Delivery For The Web</title>
      <link>https://sarasoueidan.com/2014/12/19/svg-optimization/</link>
      <pubDate>Fri, 19 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sarasoueidan.com/2014/12/19/svg-optimization/</guid>
      <description>SVGs are a great asset in our responsive web design toolkit. But just like any other image format, there are certain steps you should take to make sure you’re delivering optimised resources that don’t have a negative impact on your page’s performance. Here are some things that you can do to make sure you’re delivering better SVGs for the web. </description>
    </item>
    
    <item>
      <title>An Overview Of SVG Sprite Creation Techniques</title>
      <link>https://sarasoueidan.com/2014/12/16/overview-of-svg-sprite-creation-techniques/</link>
      <pubDate>Tue, 16 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sarasoueidan.com/2014/12/16/overview-of-svg-sprite-creation-techniques/</guid>
      <description>SVG can be used as an icon system to replace icon fonts, and there are several ways to create SVG sprites. This article I wrote for this year&#39;s 24Ways will give you an overview of three of them. While we’re at it, we’re going to take a look at some of the available tools used to automate sprite creation and fallback for us. </description>
    </item>
    
    <item>
      <title>Styling and Animating SVGs with CSS</title>
      <link>https://sarasoueidan.com/2014/11/03/styling-and-animating-svgs-with-css/</link>
      <pubDate>Mon, 03 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sarasoueidan.com/2014/11/03/styling-and-animating-svgs-with-css/</guid>
      <description>CSS can be used to style and animate scalable vector graphics, much like it is used to style and animate HTML elements. In this article I wrote for Smashing Magazine, which is a modified transcript of a talk I recently gave at CSSconf EU and From the Front, I’ll go over the prerequisites and techniques for working with CSS in SVG. </description>
    </item>
    
    <item>
      <title>A Guide to SVG Animations (SMIL)</title>
      <link>https://sarasoueidan.com/2014/10/13/guide-svg-animations-smil/</link>
      <pubDate>Mon, 13 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sarasoueidan.com/2014/10/13/guide-svg-animations-smil/</guid>
      <description>What the title says: a complete guide to SVG animations derived from the SMIl specification. The extensive guide features a lot of demos and goes over the animations syntax, covering almost everything you need to know to get started with SVG Animations today. </description>
    </item>
    
    <item>
      <title>Making SVGs Responsive With CSS</title>
      <link>https://sarasoueidan.com/2014/08/19/responsive-svgs/</link>
      <pubDate>Tue, 19 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sarasoueidan.com/2014/08/19/responsive-svgs/</guid>
      <description>An article on how to make embedded SVGs cross-browser responsive. We&#39;re going to cover embedding techniques, how to apply the &#34;Padding Hack&#34; and how to use inline media queries to make SVGs adaptive. </description>
    </item>
    
    <item>
      <title>Understanding SVG Coordinate Systems and Transformations (Part 3) — Establishing New Viewports</title>
      <link>https://sarasoueidan.com/2014/08/05/nesting-svgs/</link>
      <pubDate>Tue, 05 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sarasoueidan.com/2014/08/05/nesting-svgs/</guid>
      <description>At any point in an SVG drawing, you can establish new viewports and user coordinate systems by either nesting &amp;lt;svg&amp;gt;s or using elements such as the &amp;lt;symbol&amp;gt; element, among others. In this article we&#39;re going to have a look at how we can do that and how this can be useful for controlling SVG elements and making them more flexible (and/or fluid). This is the third and last article in a series of articles about SVG coordinate systems and transformations.</description>
    </item>
    
    <item>
      <title>Understanding SVG Coordinate Systems and Transformations (Part 2) — The &lt;code&gt;transform&lt;/code&gt; Attribute</title>
      <link>https://sarasoueidan.com/2014/07/30/svg-transformations/</link>
      <pubDate>Wed, 30 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sarasoueidan.com/2014/07/30/svg-transformations/</guid>
      <description>SVG elements can be transformed by scaling, translating, skewing, and rotating&amp;mdash;much like HTML elements can be transformed using CSS Transforms. However, there are certain inevitable differences when it comes to the coordinate systems used and affected by these transformations. In this article we&#39;ll go over the SVG transform attribute and CSS property, covering how to use it, and things you should know about SVG coordinate system transformations. This is the second article in a series I&amp;rsquo;m writing about SVG coordinate systems and transformations.</description>
    </item>
    
    <item>
      <title>Understanding SVG Coordinate Systems and Transformations (Part 1) — The viewport, &lt;code&gt;viewBox&lt;/code&gt;, and &lt;code&gt;preserveAspectRatio&lt;/code&gt;</title>
      <link>https://sarasoueidan.com/2014/07/17/svg-coordinate-systems/</link>
      <pubDate>Thu, 17 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sarasoueidan.com/2014/07/17/svg-coordinate-systems/</guid>
      <description>SVG elements aren&#39;t governed by a CSS box model like HTML elements are. This makes positioning and transforming these elements trickier and may seem&amp;mdash;at first glance&amp;mdash;less intuitive. However, once you understand how SVG coordinate systems and transformations work, manipulating SVGs becomes a lot easier and makes a lot more sense. In this article we&#39;re going to go over three of the most important SVG attributes that control SVG coordinate systems: viewport, viewBox, and preserveAspectRatio.</description>
    </item>
    
    <item>
      <title>Clipping in CSS and SVG — The &lt;code&gt;clip-path&lt;/code&gt; Property and &lt;code&gt;&amp;lt;clipPath&amp;gt;&lt;/code&gt; Element</title>
      <link>https://sarasoueidan.com/2014/07/08/css-svg-clipping/</link>
      <pubDate>Tue, 08 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sarasoueidan.com/2014/07/08/css-svg-clipping/</guid>
      <description>CSS and SVG have a lot in common. A lot of the features that we have in CSS today were imported from SVG. One of these features is the Clipping operation. Both CSS and SVG allow us to &#34;clip&#34; elements into custom non-rectangular shapes. In this article we will go over the clipping techniques in both CSS and SVG, covering everything you need to know to get started.
Please note that the demos in this article may not work in your browser.</description>
    </item>
    
    <item>
      <title>Structuring, Grouping, and Referencing in SVG — The &lt;code&gt;&amp;lt;g&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;use&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;defs&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;symbol&amp;gt;&lt;/code&gt; Elements</title>
      <link>https://sarasoueidan.com/2014/07/03/structuring-grouping-referencing-in-svg/</link>
      <pubDate>Thu, 03 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sarasoueidan.com/2014/07/03/structuring-grouping-referencing-in-svg/</guid>
      <description>SVG comes with its own ways for structuring a document by means of certain SVG elements that allow us to define, group, and reference objects within the document. These elements make reusing elements easy, while maintaining clean and readable code. In this article we&#39;ll go over these elements, highlighting the difference between them and the advantages of each one.
Grouping with the &amp;lt;g&amp;gt; element The &amp;lsquo;g&amp;rsquo; in &amp;lt;g&amp;gt; stands for &amp;lsquo;group&amp;rsquo;.</description>
    </item>
    
    <item>
      <title>Techniques For Creating Textured Text</title>
      <link>https://sarasoueidan.com/2013/12/02/textured-text-techniques/</link>
      <pubDate>Mon, 02 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sarasoueidan.com/2013/12/02/textured-text-techniques/</guid>
      <description>For too long, we&#39;ve resorted to graphics editors to create images of text that has nice effects such as creative fills or that blends with its background in a nice subtle way. We used those images as a replacement for text on our pages, which made that text unaccessible and un-selectable.. But with all the advances in web design today, we can now create textured text effects using CSS, using SVG, and using HTML5 Canvas.</description>
    </item>
    
  </channel>
</rss>